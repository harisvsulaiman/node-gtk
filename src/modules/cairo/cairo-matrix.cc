/* autogenerated by generator-matrix.js */

#include "../../debug.h"
#include "../../gi.h"
#include "../../util.h"
#include "cairo-matrix.h"
#include "cairo-rectangle.h"
#include "cairo-rectangle-int.h"

using namespace v8;


namespace GNodeJS {

namespace Cairo {



Nan::Persistent<FunctionTemplate> Matrix::constructorTemplate;
Nan::Persistent<Function>         Matrix::constructor;



/*
 * Initialize matrix.
 */

Matrix::Matrix(cairo_matrix_t* data) : ObjectWrap() {
  _data = data;
}

/*
 * Destroy matrix..
 */

Matrix::~Matrix() {
  if (_data != NULL) {
    delete _data;
  }
}


/*
 * Template methods
 */


Local<FunctionTemplate> Matrix::GetTemplate() {
  if (constructorTemplate.IsEmpty())
    Matrix::SetupTemplate();
  return Nan::New<FunctionTemplate> (constructorTemplate);
}

Local<Function> Matrix::GetConstructor() {
  if (constructor.IsEmpty())
    Matrix::SetupTemplate();
  return Nan::New<Function> (constructor);
}

void Matrix::SetupTemplate() {

  // Constructor
  auto tpl = Nan::New<FunctionTemplate>(Matrix::New);
  tpl->InstanceTemplate()->SetInternalFieldCount(1);
  tpl->SetClassName(Nan::New("CairoMatrix").ToLocalChecked());



  auto ctor = tpl->GetFunction();



  constructorTemplate.Reset(tpl);
  constructor.Reset(ctor);
}



/*
 * Initialize method
 */


void Matrix::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::Set (target, Nan::New ("Matrix").ToLocalChecked(), Matrix::GetConstructor());
}



/*
 * Instance constructors
 */



NAN_METHOD(Matrix::New) {
  if (!info.IsConstructCall()) {
    return Nan::ThrowTypeError("Class constructors cannot be invoked without 'new'");
  }

  cairo_matrix_t* data = NULL;

  if (info[0]->IsExternal()) {
    data = (cairo_matrix_t*) External::Cast (*info[0])->Value ();
  }
  else if (info.Length() == 6) {
    auto xx = Nan::To<double>(info[0].As<Number>()).ToChecked();
    auto yx = Nan::To<double>(info[1].As<Number>()).ToChecked();
    auto xy = Nan::To<double>(info[2].As<Number>()).ToChecked();
    auto yy = Nan::To<double>(info[3].As<Number>()).ToChecked();
    auto x0 = Nan::To<double>(info[4].As<Number>()).ToChecked();
    auto y0 = Nan::To<double>(info[5].As<Number>()).ToChecked();

    data = new cairo_matrix_t();
    cairo_matrix_init (data, xx, yx, xy, yy, x0, y0);
  }
  else {
    return Nan::ThrowError("Cannot instantiate Matrix: requires 7 arguments");
  }

  Matrix* matrix = new Matrix(data);
  matrix->Wrap(info.This());

  info.GetReturnValue().Set(info.This());
}



/*
 * Methods
 */





}; // Cairo

}; // GNodeJS